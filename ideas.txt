
2. implement quarternion math and use it for rotations in 3d
    . struct with w, x, y, z attributes and print, size, etc methods
    . allows to get otations about any axis without doing 7 matrix multiplications just for 
      1 rotation about a given axis
    . quarternion to 4ร4 matrix conversion
    . euler angle conversion?
4. draw circle (kinda bad way) (doing this using lines is better ig)
    . using unit vector, rotation vector, 2pi*r instead of drawing points at distance r from centre
    . or maybe draw using lines
    . or some better algorithm
    . create the siney circle (circle around y, with y += sin(angle) angle is variable)
/6. world is a array of vertices
    /. every object is a array of pointer to triangles
      /. every triangle is a array of pointer to vertices
7. managing objects
    . create an interface with draw()
      . put all objects in an array in the interface
      . loop over them to draw each
    /. manage another rotation matrix connected to each objest that defines its rotation per frame
      /. if objects rotates continuously, the matrix is not identity matrix
      /. if matrix stops rotation after some time, it the matrix changes into identity matrix after 
        after some time
    /. to rotate everything around player, a single camera matrix is multiplied with every coord
      perhaps save it with the player
/10. depth buffer
    /. create a [][]float of the suze of no. of pixels with some default value (-inf)
    /. while going through all pixels of a triangle,
      /. calculate the z value at that point in triangle
        and if its higher than the current value, replace it with the new value and draw the pixel
11. draw torus
    . spin circle around a axis and store the vertices
    . connect vertices into triangles
12. while rendering, when cam moves, campos is directly changed while being used but try.fill()
    it shows effectquicker than the movement of camera. maybe try just modifying camMat 
    directly and not use channel. as we dont care about race condition there
13. 


. remember to
    . WRITE COMMENTS FOR CODE BEFORE ABANDONING/PAUSING PROJECT
    /. change printing to something smarter
      /. a := []rune("xxxxxxx") fmt.Println(string(a)) . this works!
    . try: 1/(z-scrDist) and scrDist/(z+scrDist) in projectP3d
    . make a demo showing fov change with time
    . add roll to camera.go
    . try adding sin and stuff to the sphere coordinates
      . that coding train vid (wierd shapes from spheres)
    . add w1 to the new triangle rasterization (fill())
      . it would add a matScalar but save 2 matSub and 1 matAdd
      . basically use the barycentric coords w1, w2, w3 instead of just 2
    . add panic quit Q to controls
    

. plan
    . clip for z == 0
      . M1) while changing camtices or something, if z > -1 then change the triangle 
        such that it faces away from cam. and calc for that is easy. so it gets
        yeeted as easily as possible while drawing
        . this would be terrible for long triangles with 1 vertex behind limit
        . how to determine if triangle z > -1 (3 verrices) even 1 รท0 worls fail
      . M2) will need to create more triangles if this happens. but then object [][][]vertices would suck
        . maybe a seperate slice for that?
        . so just interpolate the intersection point of edges of triangle and make new triangles
      . rest of the clips are kinda already there
        . no triangles facing away from cam
        . no triangles if all vertices outside screen
          . maybe improve this
        . far away triangles are cliped due to zbuffer = -2 or whatever
    . try pre-calculated normals
      . let normals always originate from vertices[0]. so normals would just be points in space
        . this makes finding normals into a matSub and having to maintain the normal points (from the above point)
      . need to recalculate every time the object moves in world space
    . objects
      . make torus
    . optimise (just the mesh part and not the fill)
      /. a := []byte("shshh") fmt.Printf("%s", a).
        /. this works but not sure if faster
          /. potentially faster to convert byte slice to string
            /. go docs mention conversion of rune slice is concatenation of runes converted to string
              whereas byte slices are not converted and then concatenated
        /. should not be slower atleast (i think)
      /. make a vecMult function that multiplies matrix to a vector, but hard code the expanded from
        doing this enables to directly store the transformed vertices in vertices[][][]float and not have to make a copy
        . similarly make other functions used in tri.fill (and other functions in main loop) more efficient
      . making this multi-threaded
        . try creating less go routines. ie create once and use multiple times
        . if the naieve method dosent work, then try the following stuff
          . branch concurrency2. this is slow idk why
            . naieve method - multiple go-routines rasterising different triangles
            . but what if 2 go-routines try to access same pixel at same time?
            . what if race conditions?
            . maybe try semaphore
        . branch concurrency1. this seems just as fast as normal stuff
          . the few goroutines + work from channels makes it slower idk why
          . 15 or something worker go routines (necessary for pixels if we want safety)
          . 1 additional go-routine that puts pixel structure in a channel
          . printy() takes in a channel with the pixel structure that the workers submit
            and checks zbuffer and sets pixels and then prints
      . store all vertices in a single array to prevent copies.
        . point 7 from above
      . try converting vertices to structs instead of [][]
        . just to see if this is more efficient. idk really what to expect. but cpp code uses class for these
    . save camMat with camera
    . new rasterisation method (similar to 1st (attempt 4)) (phone camera gallery)
      . seems VERY complicated cuz of giveIndex, charRatio, zbuffer
    . add the wait delay in parallel somehow

. bugs
    . random characters appear randomly
      . its most likely an issue with ncurses + ubu + termux
    . out of place bright/dark characters appear on the bottom of sphere
      . sphere creation error. half the triangles at the top and bottom are just too thin
    . rotating loaded objects about their centres dosent go well
      . happens cuz i cant find the centre of object
      . and thus scaling them goes bad too
    . many out of place dark spots in teapot
      . idk why 
