/1. for objects
    . make class of diff objects, with class.draw() for drawing,
      class.rotate(), etc
        eg( 
          cube:
            centre = ..
            side = ..
            coords = (in terms of centre and side. so that changing centre translates the cube)
            // if coords not like above, we can try translate() or just 4 by 4 matrix in rotate()
          )
2. implement quarternion math and use it for rotations in 3d
    . struct with w, x, y, z attributes and print, size, etc methods
    . allows to get otations about any axis without doing 7 matrix multiplications just for 
      1 rotation about a given axis
    . quarternion to 4Ã—4 matrix conversion
    . euler angle conversion?
3. projection matrix for projecting to 2d and depth buffer
4. draw circle
    . using unit vector, rotation vector, 2pi*r instead of drawing points at distance r from centre
    . or maybe draw using lines
    . or some better algorithm
    . create the siney circle (circle around y, with y += sin(angle) angle is variable)
5. clipping
    . either clip before the rotation cum projection matrix, or clip in the projected space
      . to clip before, we can create moving player objects with fixed six planes (essentially just
        some normal vectors and some points)
      . though clipping after projection has an advantage of having simpler normals to planes
6. managing objects
    . create an interface with draw()
      . put all objects in an array in the interface
      . loop over them to draw each
    . manage another rotation matrix connected to each objest that defines its rotation per frame
      . if objects rotates continuously, the matrix is not identity matrix
      . if matrix stops rotation after some time, it the matrix changes into identity matrix after 
        after some time
    . to rotate everything around player, a single camera matrix is multiplied with every coord
      perhaps save it with the player


.  remember to
    /. change the printing method, so that points outside the screen dont crash the program
    . change board to [][]
    . change printing to something smarter
      . a := []rune("xxxxxxx") fmt.Println(string(a)) . this works!
    /. try: big scrDist and objects within that and origin(closer to screen)
          - cant really do this cuz i got fov now.
    . try: 1/(z-scrDist) and scrDist/(z+scrDist) in projectP3d
    . make a demo showing fov change with time