/1. for objects
    . make class of diff objects, with class.draw() for drawing,
      class.rotate(), etc
        eg( 
          cube:
            centre = ..
            side = ..
            coords = (in terms of centre and side. so that changing centre translates the cube)
            // if coords not like above, we can try translate() or just 4 by 4 matrix in rotate()
          )
2. implement quarternion math and use it for rotations in 3d
    . struct with w, x, y, z attributes and print, size, etc methods
    . allows to get otations about any axis without doing 7 matrix multiplications just for 
      1 rotation about a given axis
    . quarternion to 4Ã—4 matrix conversion
    . euler angle conversion?
3. projection matrix for projecting to 2d and depth buffer


.  remember to
    . change the printing method, so that points outside the screen dont crash the program
    . change board to [][]
    . change printing to something smarter
    /. try: big scrDist and objects within that and origin(closer to screen)
          - cant really do this cuz i got fov now.
    . try: 1/(z-scrDist) and scrDist/(z+scrDist) in projectP3d
    . make a demo showing fov change with time